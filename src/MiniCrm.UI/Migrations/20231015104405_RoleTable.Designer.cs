// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniCrm.UI.Services;

#nullable disable

namespace MiniCrm.UI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231015104405_RoleTable")]
    partial class RoleTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MiniCrm.UI.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5de9688a-1a13-479a-a20d-601be34ac659"),
                            Email = "ivanov@ya.com",
                            FirstName = "Иванов",
                            LastName = "Иван",
                            Password = "ZoLHLS1KAX6f8UB6UcYDETRbxTf1Td7XlsD1QsWhToo=",
                            Salt = new byte[] { 167, 36, 77, 102, 34, 152, 94, 33, 205, 134, 73, 160, 151, 120, 246, 95 }
                        });
                });

            modelBuilder.Entity("MiniCrm.UI.Models.EmployeeProject", b =>
                {
                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeProjects");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.EmployeeRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeRoles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("5e65bd9a-8161-44ad-8175-0aeebcc8a0d1"),
                            EmployeeId = new Guid("5de9688a-1a13-479a-a20d-601be34ac659")
                        });
                });

            modelBuilder.Entity("MiniCrm.UI.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerCompanyInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PerformingCompanyInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e65bd9a-8161-44ad-8175-0aeebcc8a0d1"),
                            Name = "manager",
                            NormalizedName = "руководитель"
                        },
                        new
                        {
                            Id = new Guid("2e6ec6b6-d90b-4cc2-b910-3579c480a8ef"),
                            Name = "project_manager",
                            NormalizedName = "менеджер проекта"
                        },
                        new
                        {
                            Id = new Guid("51abee2b-11eb-4e5f-99aa-27692b3717b3"),
                            Name = "employee",
                            NormalizedName = "сотрудник"
                        });
                });

            modelBuilder.Entity("MiniCrm.UI.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ExecutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.EmployeeProject", b =>
                {
                    b.HasOne("MiniCrm.UI.Models.Employee", "Employee")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCrm.UI.Models.Project", "Project")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.EmployeeRole", b =>
                {
                    b.HasOne("MiniCrm.UI.Models.Employee", "Employee")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCrm.UI.Models.Role", "Role")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.Manager", b =>
                {
                    b.HasOne("MiniCrm.UI.Models.Employee", "Employee")
                        .WithMany("Managers")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.Project", b =>
                {
                    b.HasOne("MiniCrm.UI.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.Task", b =>
                {
                    b.HasOne("MiniCrm.UI.Models.Employee", "Author")
                        .WithMany("Authors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCrm.UI.Models.Employee", "Executor")
                        .WithMany("Executors")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MiniCrm.UI.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Executor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.Employee", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("EmployeeProjects");

                    b.Navigation("EmployeeRoles");

                    b.Navigation("Executors");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.Project", b =>
                {
                    b.Navigation("EmployeeProjects");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MiniCrm.UI.Models.Role", b =>
                {
                    b.Navigation("EmployeeRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
